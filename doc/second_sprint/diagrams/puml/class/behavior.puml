@startuml

class Entity{

}

package behavior{

    class Behavior{
        - maze: Maze
        - entity: Entity

        # Behavior(maze: Maze, entity: Entity)

        + behave(): GlobalDirection

        + move(maze: Maze, entity: Entity): GlobalDirection
        + attack(maze: Maze, entity: Entity)
        + check(maze: Maze, entity: Entity): boolean
    }

    note left: behave is a pattern method: \n\nif check then \n   attack \nelse \n   move

    package check{

        interface Check{
            + check(maze: Maze, entity: Entity): boolean
        }

        class CheckRandom{
            + check(maze: Maze, entity: Entity): boolean
        }

        class CheckHero{
            + check(maze: Maze, entity: Entity): boolean
        }

    }

    package move{

        interface Move{
            + move(maze: Maze, entity: Entity): GlobalDirection
        }

        class MoveRandom{
            + move(maze: Maze, entity: Entity): GlobalDirection
        }

        class MoveHero{
            + move(maze: Maze, entity: Entity): GlobalDirection
        }

    }

    package attack{

        interface Attack{
            + attack(maze: Maze, entity: Entity)
        }

        class AttackSimple{
            + attack(maze: Maze, entity: Entity)
        }

        class AttackHero{
            + attack(maze: Maze, entity: Entity)
        }

    }

    class BehaveFabric{
        + getMonsterBehavior(maze: Maze, entity: Entity): Behavior
        + getHeroBehavior(maze: Maze, entity: Entity): Behavior
    }

}


AttackSimple ..|> Attack
AttackHero ..|> Attack

MoveRandom ..|> Move
MoveHero ..|> Move

CheckRandom ..|> Check
CheckHero ..|> Check

Entity --> "1" Behavior: - behavior

Behavior --> "1" Move
Behavior --> "1" Check
Behavior --> "1" Attack
@enduml